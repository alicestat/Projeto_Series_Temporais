library(shinydashboard)
library(leaflet)
library(shiny)
library(dplyr)
library(here)
library(fresh)
library(shinythemes)
library(magrittr)
library(rvest)
library(readxl)
library(maps)
library(ggplot2)
library(reshape2)
library(ggiraph)
library(RColorBrewer)
library(plotly)
library(geojsonio)
library(shinyWidgets)

# load required packages
# if(!require(magrittr)) install.packages("magrittr", repos = "http://cran.us.r-project.org")
# if(!require(rvest)) install.packages("rvest", repos = "http://cran.us.r-project.org")
# if(!require(readxl)) install.packages("readxl", repos = "http://cran.us.r-project.org")
#if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
# if(!require(maps)) install.packages("maps", repos = "http://cran.us.r-project.org")
# if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
# if(!require(reshape2)) install.packages("reshape2", repos = "http://cran.us.r-project.org")
# if(!require(ggiraph)) install.packages("ggiraph", repos = "http://cran.us.r-project.org")
# if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
#if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
# if(!require(plotly)) install.packages("plotly", repos = "http://cran.us.r-project.org")
# if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
#if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
# if(!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
#if(!require(shinydashboard)) install.packages("shinydashboard", repos = "http://cran.us.r-project.org")
#if(!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")




### SHINY UI ###
ui <- bootstrapPage(
  tags$head(includeHTML("gtag.html")),
  navbarPage(theme = shinytheme("darkly"), collapsible = TRUE,
             HTML('<a style="text-decoration:none;cursor:default;color:#FFFFFF;" class="active" href="#">Dados Meteorológicos INMET</a>'), id="nav",
             windowTitle = "Meteorologia INMET",
             
             tabPanel("Previsão diária",
                      div(class="outer",
                          tags$head(includeCSS("styles.css")),
                          leafletOutput("sars_map", width="100%", height="100%"),
                          
                          absolutePanel(id = "controls", class = "panel panel-default",
                                        top = 600, left = 55, width = 900, fixed=TRUE,
                                        draggable = TRUE, height = "auto",
                                        
                                        h3(textOutput("sars_reactive_case_count"), align = "right"),
                                        h4(textOutput("sars_reactive_death_count"), align = "right"),
                                        h6(textOutput("sars_clean_date_reactive"), align = "right"),
                                        h6(textOutput("sars_reactive_country_count"), align = "right"),
                                        plotOutput("sars_epi_curve", height="130px", width="100%"),
                                        plotOutput("sars_cumulative_plot", height="130px", width="100%")
                                        # span(("The final count appears to decrease as several cases initially classified as SARS were later re-assigned."),align = "left", style = "font-size:80%"),#tags$br(),
                                        # span(("Circles show confirmed cases for COVID, SARS, and Ebola, and estimated deaths for H1N1."),align = "left", style = "font-size:80%")
                                        # 
                                        #                                         sliderTextInput("sars_plot_date",
                                        #                                                         label = h5("Select mapping date"),
                                        #                                                         choices = format(unique(sars_cases$date), "%d %b %y"),
                                        #                                                         selected = format(sars_max_date, "%d %b %y"),
                                        #                                                         grid = FALSE,
                                        #                                                         animate=animationOptions(interval = 3000, loop = FALSE))
                          ),
                          
                          # absolutePanel(id = "logo", class = "card", bottom = 15, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
                          #               tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
                          # 
                          # absolutePanel(id = "logo", class = "card", bottom = 15, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
                          #               actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
                          #                            onclick = sprintf("window.open('%s')",
                          #                                              "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
                      )

                      # ,
                      # div(class="outer",
                      #     tags$head(includeCSS("styles.css")),
                      #     leafletOutput("mymap", width="100%", height="100%"),
                      #     
                      #     absolutePanel(id = "controls", class = "panel panel-default",
                      #                   top = 75, left = 55, width = 250, fixed=TRUE,
                      #                   draggable = TRUE, height = "auto",
                      #                   
                      #                   span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
                      #                   h3(textOutput("reactive_case_count"), align = "right"),
                      #                   h4(textOutput("reactive_death_count"), align = "right"),
                      #                   h6(textOutput("clean_date_reactive"), align = "right"),
                      #                   h6(textOutput("reactive_country_count"), align = "right"),
                      #                   plotOutput("epi_curve", height="130px", width="100%"),
                      #                   plotOutput("cumulative_plot", height="130px", width="100%"),
                      #                   
                      #                   sliderTextInput("plot_date",
                      #                                   label = h5("Select mapping date"),
                      #                                   choices = format(unique(cv_cases$date), "%d %b %y"),
                      #                                   selected = format(current_date, "%d %b %y"),
                      #                                   grid = FALSE,
                      #                                   animate=animationOptions(interval = 3000, loop = FALSE))
                      #                   
                      #     ),
                      #     
                      #     absolutePanel(id = "logo", class = "card", bottom = 20, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
                      #                   tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
                      #     
                      #     absolutePanel(id = "logo", class = "card", bottom = 20, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
                      #                   actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
                      #                                onclick = sprintf("window.open('%s')", 
                      #                                                  "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
                      #     
                      #     
                      # )
             ),
             
             tabPanel("Previsão longo prazo",
                      div(class="outer",
                          tags$head(includeCSS("styles.css")),
                          leafletOutput("sars_map", width="100%", height="100%"),
                          
                          absolutePanel(id = "controls", class = "panel panel-default",
                                        top = 600, left = 55, width = 900, fixed=TRUE,
                                        draggable = TRUE, height = "auto",
                                        
                                        h3(textOutput("sars_reactive_case_count"), align = "right"),
                                        h4(textOutput("sars_reactive_death_count"), align = "right"),
                                        h6(textOutput("sars_clean_date_reactive"), align = "right"),
                                        h6(textOutput("sars_reactive_country_count"), align = "right"),
                                        plotOutput("sars_epi_curve", height="130px", width="100%"),
                                        plotOutput("sars_cumulative_plot", height="130px", width="100%")
                                        # span(("The final count appears to decrease as several cases initially classified as SARS were later re-assigned."),align = "left", style = "font-size:80%"),#tags$br(),
                                        # span(("Circles show confirmed cases for COVID, SARS, and Ebola, and estimated deaths for H1N1."),align = "left", style = "font-size:80%")
                                        # 
                                        #                                         sliderTextInput("sars_plot_date",
                                        #                                                         label = h5("Select mapping date"),
                                        #                                                         choices = format(unique(sars_cases$date), "%d %b %y"),
                                        #                                                         selected = format(sars_max_date, "%d %b %y"),
                                        #                                                         grid = FALSE,
                                        #                                                         animate=animationOptions(interval = 3000, loop = FALSE))
                          ),
                          
                          # absolutePanel(id = "logo", class = "card", bottom = 15, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
                          #               tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
                          # 
                          # absolutePanel(id = "logo", class = "card", bottom = 15, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
                          #               actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
                          #                            onclick = sprintf("window.open('%s')",
                          #                                              "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
                      )

                      # ,
                      # sidebarLayout(
                      #   sidebarPanel(
                      #     
                      #     span(tags$i(h6("Reported cases are subject to significant variation in testing policy and capacity between countries.")), style="color:#045a8d"),
                      #     span(tags$i(h6("Occasional anomalies (e.g. spikes in daily case counts) are generally caused by changes in case definitions.")), style="color:#045a8d"),
                      #     
                      #     pickerInput("level_select", "Level:",   
                      #                 choices = c("Global", "Continent", "Country", "US state"), 
                      #                 selected = c("Country"),
                      #                 multiple = FALSE),
                      #     
                      #     pickerInput("region_select", "Country/Region:",   
                      #                 choices = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country), 
                      #                 options = list(`actions-box` = TRUE, `none-selected-text` = "Please make a selection!"),
                      #                 selected = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country)[1:10],
                      #                 multiple = TRUE), 
                      #     
                      #     pickerInput("outcome_select", "Outcome:",   
                      #                 choices = c("Deaths per million", "Cases per million", "Cases (total)", "Deaths (total)"), 
                      #                 selected = c("Deaths per million"),
                      #                 multiple = FALSE),
                      #     
                      #     pickerInput("start_date", "Plotting start date:",   
                      #                 choices = c("Date", "Week of 100th confirmed case", "Week of 10th death"), 
                      #                 options = list(`actions-box` = TRUE),
                      #                 selected = "Date",
                      #                 multiple = FALSE), 
                      #     
                      #     sliderInput("minimum_date",
                      #                 "Minimum date:",
                      #                 min = as.Date(cv_min_date,"%Y-%m-%d"),
                      #                 max = as.Date(current_date,"%Y-%m-%d"),
                      #                 value=as.Date(cv_min_date),
                      #                 timeFormat="%d %b"),
                      #     
                      #     "Select outcome, regions, and plotting start date from drop-down menues to update plots. Countries with at least 1000 confirmed cases are included."
                      #   ),
                      #   
                      #   mainPanel(
                      #     tabsetPanel(
                      #       tabPanel("Cumulative", plotlyOutput("country_plot_cumulative")),
                      #       tabPanel("New", plotlyOutput("country_plot")),
                      #       tabPanel("Cumulative (log10)", plotlyOutput("country_plot_cumulative_log"))
                      #     )
                      #   )
                      # )
             ),
             
             tabPanel("Relações entre regiões"
                      ,
                      div(class="outer",
                          tags$head(includeCSS("styles.css")),
                          leafletOutput("sars_map", width="100%", height="100%"),

                          absolutePanel(id = "controls", class = "panel panel-default",
                                        top = 600, left = 55, width = 900, fixed=TRUE,
                                        draggable = TRUE, height = "auto",

                                        h3(textOutput("sars_reactive_case_count"), align = "right"),
                                        h4(textOutput("sars_reactive_death_count"), align = "right"),
                                        h6(textOutput("sars_clean_date_reactive"), align = "right"),
                                        h6(textOutput("sars_reactive_country_count"), align = "right"),
                                        plotOutput("sars_epi_curve", height="130px", width="100%"),
                                        plotOutput("sars_cumulative_plot", height="130px", width="100%")
                                        # span(("The final count appears to decrease as several cases initially classified as SARS were later re-assigned."),align = "left", style = "font-size:80%"),#tags$br(),
                                        # span(("Circles show confirmed cases for COVID, SARS, and Ebola, and estimated deaths for H1N1."),align = "left", style = "font-size:80%")
# 
#                                         sliderTextInput("sars_plot_date",
#                                                         label = h5("Select mapping date"),
#                                                         choices = format(unique(sars_cases$date), "%d %b %y"),
#                                                         selected = format(sars_max_date, "%d %b %y"),
#                                                         grid = FALSE,
#                                                         animate=animationOptions(interval = 3000, loop = FALSE))
                          ),

                          # absolutePanel(id = "logo", class = "card", bottom = 15, left = 60, width = 80, fixed=TRUE, draggable = FALSE, height = "auto",
                          #               tags$a(href='https://www.lshtm.ac.uk', tags$img(src='lshtm_dark.png',height='40',width='80'))),
                          # 
                          # absolutePanel(id = "logo", class = "card", bottom = 15, left = 20, width = 30, fixed=TRUE, draggable = FALSE, height = "auto",
                          #               actionButton("twitter_share", label = "", icon = icon("twitter"),style='padding:5px',
                          #                            onclick = sprintf("window.open('%s')",
                          #                                              "https://twitter.com/intent/tweet?text=%20@LSHTM_Vaccines%20outbreak%20mapper&url=https://bit.ly/2uBvnds&hashtags=coronavirus")))
                      )
             ),
             
             tabPanel("Modelos"
                      ,

                      sidebarLayout(
                        sidebarPanel(
                          radioButtons("comparison_metric", h3("Select:"),
                                       c("Ex 1" = "cases",
                                         "Ex 2" = "deaths",
                                         "Ex 3" = "countries")),
                          textOutput("epi_notes_1"),
                          textOutput("epi_notes_2")
                        ),

                        mainPanel(plotlyOutput("comparison_plot"), width = 6)
                      )
             ),
             
             tabPanel("Dados"
                      ,
                      numericInput("maxrows", "Rows to show", 25),
                      verbatimTextOutput("rawtable"),
                      downloadButton("downloadCsv", "Download as CSV"),tags$br(),tags$br()
             ),
             
             tabPanel("Sobre o site"
                      ,
                      tags$div(
                        tags$h4("Introdução"),
                        "No contexto de um programa de aprendizado ao longo de um semestre acadêmico, empreenderemos uma jornada composta por quatro fases cruciais,
                        culminando na elaboração de uma plataforma digital interativa voltada para a análise e exploração de dados meteorológicos oriundos da base 
                        de dados do INMET, abrangendo o intervalo temporal de 2020 a 2021. Através deste percurso, conduziremos a transformação do conhecimento 
                        teórico em aplicações práticas.",
                        # tags$a(href="https://experience.arcgis.com/experience/685d0ace521648f8a5beeeee1b9125cd", "the WHO,"),
                        # tags$a(href="https://gisanddata.maps.arcgis.com/apps/opsdashboard/index.html#/bda7594740fd40299423467b48e9ecf6", "Johns Hopkins University,"),"and",
                        # tags$a(href="https://ourworldindata.org/coronavirus-data-explorer?zoomToSelection=true&time=2020-03-01..latest&country=IND~USA~GBR~CAN~DEU~FRA&region=World&casesMetric=true&interval=smoothed&perCapita=true&smoothing=7&pickerMetric=total_cases&pickerSort=desc", "Our World in Data."),
                        # "Our aim is to complement these resources with several interactive features, including the timeline function and the ability to overlay past outbreaks.",

                        tags$br(),tags$br(),tags$h4("Exploração e Compreensão dos Dados Meteorológicos: Desvelando a Complexidade dos Dados"),
                        "Na fase inaugural, imergiremos em um amplo acervo de dados meteorológicos públicos disponibilizados pelo INMET. 
                        Nesta imersão, decifraremos a infraestrutura que alberga tais dados, solidificando uma compreensão aprofundada das metodologias 
                        subjacentes à coleta e disseminação. A exploração deste ecossistema não somente ampliará o horizonte de compreensão dos dados, mas também
                        fornecerá perspicácia sobre o contexto subjacente e as limitações inerentes.",
                        # tags$br(),tags$br(),
                        # "In isolation, these headlines can be hard to interpret.
                        # How fast is the virus spreading? Are efforts to control the disease working? How does the situation compare with previous epidemics?
                        # This site is updated daily based on data published by Johns Hopkins University.
                        # By looking beyond the headlines, we hope it is possible to get a deeper understanding of this unfolding pandemic.",
                        # tags$br(),tags$br(),
                        # "An article discussing this site was published in ",tags$a(href="https://theconversation.com/coronavirus-outbreak-a-new-mapping-tool-that-lets-you-scroll-through-timeline-131422", "The Conversation. "),
                        # "The map was also featured on the BBC World Service program",tags$a(href="https://www.bbc.co.uk/programmes/w3csym33", "Science in Action."),
                        
                        tags$br(),tags$br(),tags$h4("Da Curiosidade à Formulação de Questões Relevantes: Navegando pelas Interrogações"),
                        "Em posse dos questionamentos, procederemos à exploração das teorias matemáticas, estatísticas e computacionais que fundamentam a análise dos dados
                        meteorológicos. Esta etapa nos capacitará a conduzir investigações mais abrangentes, utilizando técnicas estatísticas robustas e métodos 
                        avançados de análise computacional. Ao fazê-lo, serão revelados padrões, tendências e correlações latentes nos dados, reforçando sua habilidade
                        para sustentar decisões informadas.",
                        
                        tags$br(),tags$br(),tags$h4("Alicerces Teóricos para Análise Profunda: Explorando a Essência da Investigação"),
                        "Em posse dos questionamentos, procederemos à exploração das teorias matemáticas, estatísticas e computacionais que fundamentam a análise
                        dos dados meteorológicos. Esta etapa nos capacitará a conduzir investigações mais abrangentes, utilizando técnicas estatísticas robustas
                        e métodos avançados de análise computacional. Ao fazê-lo, serão revelados padrões, tendências e correlações latentes nos dados, 
                        reforçando sua habilidade para sustentar decisões informadas.",
                        
                        tags$br(),tags$br(),tags$h4("Desenvolvimento de uma Plataforma Web Interativa: Unindo Teoria e Prática"),
                        "O ápice deste programa educacional será materializado na construção de uma plataforma digital interativa.
                        Essa plataforma se converterá em um portal, viabilizando a análise de dados meteorológicos a um público de diversas disciplinas e 
                        níveis de expertise. Por meio da adoção de uma abordagem intuitiva e customizada, a plataforma habilitará os usuários a explorar
                        discernimentos de forma eficaz. Dessa maneira, a teoria será concretizada por meio de uma ferramenta funcional, oferecendo uma experiência
                        envolvente tanto para os pesquisadores quanto para os interessados em compreender os padrões climáticos característicos do período 
                        entre 2020 e 2021.",
                        
                        tags$br(),tags$br(),tags$h4("Referências"),
                        tags$b("Pacote ‘BrazilMet’: "), tags$a(href="https://github.com/nytimes/covid-19-data", "Package ‘BrazilMet’"),tags$br(),
                        tags$b("GitHub dos autores da biblioteca ‘BrazilMet’: "), tags$a(href="https://github.com/FilgueirasR/BrazilMet", "GitHub - FilgueirasR / BrazilMet"),tags$br(),
                        tags$b("Portal do INMET: "), tags$a(href="https://portal.inmet.gov.br/", "Instituto Nacional de Meteorologia (INMET)"),tags$br(),
                        
                        tags$br(),tags$br(),tags$h4("Autores"),
                        "Aime Gomes da Nobrega",tags$br(),
                        "Alice Guimarães Perez",tags$br(),
                        "André Dylan Andrade",tags$br(),
                        "Carolina Spera Braga",tags$br(),
                        "Daniel Gregório Chagas",tags$br(),
                        "Matheus Vinicius Barreto de Farias",tags$br(),
                        "Thaís Parron Alves",tags$br(),
                        
                        # tags$br(),tags$br(),tags$h4("Contact"),
                        # "https://www.icmc.usp.br/",tags$br(),tags$br(),
                        tags$img(src = "usp-2018.webp", width = "300px", height = "65px"), tags$img(src = "logo-icmc.png", width = "120px", height = "65px")
                      )
             )
             
  )          
)





### SHINY SERVER ###

server = function(input, output, session) {
  
  # # covid tab 
  # formatted_date = reactive({
  #   format(as.Date(input$plot_date, format="%d %b %y"), "%Y-%m-%d")
  # })
  # 
  # output$clean_date_reactive <- renderText({
  #   format(as.POSIXct(formatted_date()),"%d %B %Y")
  # })
  # 
  # reactive_db = reactive({
  #   cv_cases %>% filter(date == formatted_date())
  # })
  # 
  # reactive_db_last7d = reactive({
  #   cv_cases %>% filter(date == formatted_date() & new_cases>0)
  # })
  # 
  # reactive_db_large = reactive({
  #   large_countries = reactive_db() %>% filter(alpha3 %in% worldcountry$ADM0_A3)
  #   #large_countries = reactive %>% filter(alpha3 %in% worldcountry$ADM0_A3)
  #   worldcountry_subset = worldcountry[worldcountry$ADM0_A3 %in% large_countries$alpha3, ]
  #   large_countries = large_countries[match(worldcountry_subset$ADM0_A3, large_countries$alpha3),]
  #   large_countries
  # })
  # 
  # reactive_db_large_last7d = reactive({
  #   large_countries = reactive_db_last7d() %>% filter(alpha3 %in% worldcountry$ADM0_A3)
  #   large_countries = large_countries[order(large_countries$alpha3),]
  #   large_countries
  # })
  # 
  # reactive_polygons = reactive({
  #   worldcountry[worldcountry$ADM0_A3 %in% reactive_db_large()$alpha3, ]
  # })
  # 
  # reactive_polygons_last7d = reactive({
  #   worldcountry[worldcountry$ADM0_A3 %in% reactive_db_large_last7d()$alpha3, ]
  # })
  # 
  # output$reactive_case_count <- renderText({
  #   paste0(prettyNum(sum(reactive_db()$cases), big.mark=","), " cases")
  # })
  # 
  # output$reactive_death_count <- renderText({
  #   paste0(prettyNum(sum(reactive_db()$deaths), big.mark=","), " deaths")
  # })
  # 
  # output$reactive_country_count <- renderText({
  #   paste0(nrow(subset(reactive_db(), country!="Diamond Princess Cruise Ship")), " countries/regions affected")
  # })
  # 
  # output$reactive_new_cases_7d <- renderText({
  #   paste0(round((cv_aggregated %>% filter(date == formatted_date() & region=="Global"))$new/7,0), " 7-day average")
  # })
  # 
  # output$mymap <- renderLeaflet({ 
  #   basemap
  # })
  # 
  # observeEvent(input$plot_date, {
  #   leafletProxy("mymap") %>% 
  #     clearMarkers() %>%
  #     clearShapes() %>%
  #     
  #     addCircleMarkers(data = reactive_db(), lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/5.5), 
  #                      fillOpacity = 0.1, color = covid_col, group = "2019-COVID (cumulative)",
  #                      label = sprintf("<strong>%s (cumulative)</strong><br/>Confirmed cases: %g<br/>Deaths: %d<br/>Cases per million: %g<br/>Deaths per million: %g", reactive_db()$country, reactive_db()$cases, reactive_db()$deaths, reactive_db()$cases_per_million, reactive_db()$deaths_per_million) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = covid_col),
  #                        textsize = "15px", direction = "auto")) %>%  
  #     
  #     addPolygons(data = reactive_polygons(), stroke = FALSE, smoothFactor = 0.1, fillOpacity = 0.15, fillColor = ~cv_pal(reactive_db_large()$deaths_per_million)) %>%
  #     
  #     addCircleMarkers(data = reactive_db_last7d(), lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(new_cases)^(1/5.5), 
  #                      fillOpacity = 0.1, color = covid_col, group = "2019-COVID (new)",
  #                      label = sprintf("<strong>%s (7-day average)</strong><br/>Confirmed cases: %g<br/>Deaths: %d<br/>Cases per million: %g<br/>Deaths per million: %g", reactive_db_last7d()$country, round(reactive_db_last7d()$new_cases/7,0), round(reactive_db_last7d()$new_deaths/7,0), round(reactive_db_last7d()$new_cases_per_million/7,1), round(reactive_db_last7d()$new_deaths_per_million/7,1)) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = covid_col),
  #                        textsize = "15px", direction = "auto")) %>%
  #     
  #     addCircleMarkers(data = sars_final, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/4), 
  #                      fillOpacity = 0.2, color = sars_col, group = "2003-SARS",
  #                      label = sprintf("<strong>%s</strong><br/>SARS cases: %g<br/>Deaths: %d<br/>Cases per million: %g", sars_final$country, sars_final$cases, sars_final$deaths, sars_final$cases_per_million) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = sars_col),
  #                        textsize = "15px", direction = "auto")) %>%
  #     
  #     addCircleMarkers(data = h1n1_cases, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(projected_deaths)^(1/4), 
  #                      fillOpacity = 0.2, color = h1n1_col, group = "2009-H1N1 (swine flu)",
  #                      label = sprintf("<strong>%s</strong><br/>H1N1 deaths (confirmed): %g<br/>H1N1 deaths (estimated): %g", h1n1_cases$region, h1n1_cases$deaths, h1n1_cases$projected_deaths) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = h1n1_col),
  #                        textsize = "15px", direction = "auto")) %>%
  #     
  #     addCircleMarkers(data = ebola_cases, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/4), 
  #                      fillOpacity = 0.2, color = ebola_col, group = "2014-Ebola",
  #                      label = sprintf("<strong>%s</strong><br/>Ebola cases: %g<br/>Deaths: %d", ebola_cases$country, ebola_cases$cases, ebola_cases$deaths) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = ebola_col),
  #                        textsize = "15px", direction = "auto"))
  # })
  # 
  # output$cumulative_plot <- renderPlot({
  #   cumulative_plot(cv_aggregated, formatted_date())
  # })
  # 
  # output$epi_curve <- renderPlot({
  #   new_cases_plot(cv_aggregated, formatted_date())
  # })
  # 
  # # sars tab 
  # sars_mod_date = reactive({
  #   format(as.Date(input$sars_plot_date, format="%d %b %y"), "%Y-%m-%d")
  # })
  # 
  # output$sars_clean_date_reactive <- renderText({
  #   format(as.POSIXct(sars_mod_date()),"%d %B %Y")
  # })
  # 
  # sars_reactive_db = reactive({
  #   sars_cases %>% filter(date == sars_mod_date())
  # })
  # 
  # sars_reactive_db_large = reactive({
  #   large_countries = sars_reactive_db() %>% filter(country!="Singapore" & country!="Diamond Princess Cruise Ship" & country!="Hong Kong" & country!="Macao")
  #   large_countries = large_countries[order(large_countries$alpha3),]
  #   large_countries
  # })
  # 
  # sars_reactive_polygons = reactive({
  #   worldcountry[worldcountry$ADM0_A3 %in% sars_reactive_db_large()$alpha3, ]
  # })
  # 
  # output$sars_reactive_case_count <- renderText({
  #   paste0(sum(sars_reactive_db()$cases), " cases")
  # })
  # 
  # output$sars_reactive_death_count <- renderText({
  #   paste0(sum(sars_reactive_db()$deaths), " deaths")
  # })
  # 
  # 
  # output$sars_reactive_country_count <- renderText({
  #   paste0(length(unique(sars_reactive_db()$country_group)), " countries/territories affected")
  # })
  # 
  # output$sars_map <- renderLeaflet({
  #   sars_basemap
  # })
  # 
  # observeEvent(input$sars_plot_date, {
  #   leafletProxy("sars_map") %>% 
  #     clearMarkers() %>%
  #     clearShapes() %>%
  #     addPolygons(data = sars_reactive_polygons(), stroke = FALSE, smoothFactor = 0.2, fillOpacity = 0.1, fillColor = ~sars_pal(sars_reactive_db_large()$cases_per_million), group = "2003-SARS (cumulative)",
  #                 label = sprintf("<strong>%s</strong><br/>SARS cases: %g<br/>Deaths: %d<br/>Cases per million: %g", sars_reactive_db_large()$country, sars_reactive_db_large()$cases, sars_reactive_db_large()$deaths, sars_reactive_db_large()$cases_per_million) %>% lapply(htmltools::HTML),
  #                 labelOptions = labelOptions(
  #                   style = list("font-weight" = "normal", padding = "3px 8px", "color" = sars_col),
  #                   textsize = "15px", direction = "auto")) %>%
  #     
  #     addCircleMarkers(data = sars_reactive_db(), lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/4), 
  #                      fillOpacity = 0.2, color = sars_col, group = "2003-SARS (cumulative)",
  #                      label = sprintf("<strong>%s</strong><br/>SARS cases: %g<br/>Deaths: %d<br/>Cases per million: %g", sars_reactive_db()$country, sars_reactive_db()$cases, sars_reactive_db()$deaths, sars_reactive_db()$cases_per_million) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = sars_col),
  #                        textsize = "15px", direction = "auto")) %>%
  #     
  #     addCircleMarkers(data = cv_today, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/5.5),
  #                      fillOpacity = 0.1, color = covid_col, group = "2019-COVID",
  #                      label = sprintf("<strong>%s (cumulative)</strong><br/>Confirmed cases: %g<br/>Deaths: %d<br/>Cases per million: %g", cv_today$country, cv_today$cases, cv_today$deaths, cv_today$cases_per_million) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = covid_col),
  #                        textsize = "15px", direction = "auto"))  %>%
  #     
  #     addCircleMarkers(data = h1n1_cases, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(projected_deaths)^(1/4),
  #                      fillOpacity = 0.2, color = h1n1_col, group = "2009-H1N1 (swine flu)",
  #                      label = sprintf("<strong>%s</strong><br/>H1N1 deaths (confirmed): %g<br/>H1N1 deaths (estimated): %g", h1n1_cases$region, h1n1_cases$deaths, h1n1_cases$projected_deaths) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = h1n1_col),
  #                        textsize = "15px", direction = "auto")) %>%
  #     
  #     addCircleMarkers(data = ebola_cases, lat = ~ latitude, lng = ~ longitude, weight = 1, radius = ~(cases)^(1/4),
  #                      fillOpacity = 0.2, color = ebola_col, group = "2014-Ebola",
  #                      label = sprintf("<strong>%s</strong><br/>Ebola cases: %g<br/>Deaths: %d", ebola_cases$country, ebola_cases$cases, ebola_cases$deaths) %>% lapply(htmltools::HTML),
  #                      labelOptions = labelOptions(
  #                        style = list("font-weight" = "normal", padding = "3px 8px", "color" = ebola_col),
  #                        textsize = "15px", direction = "auto")) 
  # })
  # 
  # output$sars_cumulative_plot <- renderPlot({
  #   sars_cumulative_plot(sars_aggregated, sars_mod_date())
  # })
  # 
  # output$sars_epi_curve <- renderPlot({
  #   sars_new_cases_plot(sars_aggregated, sars_mod_date())
  # })
  # 
  # # comparison plot
  # output$comparison_plot <- renderPlotly({
  #   comparison_plot(epi_comp, input$comparison_metric)
  # })
  # 
  # # add footnote for cases
  # output$epi_notes_1 <- renderText({
  #   if(input$comparison_metric=="cases") { paste0("Note that the axis is on a log10 scale so moves in 10-fold increments.") }
  # })
  # 
  # # add footnote for deaths
  # output$epi_notes_2 <- renderText({
  #   if(input$comparison_metric=="deaths") { 
  #     paste0("Note that the axis is on a log10 scale so moves in 10-fold increments. For H1N1, the number of laboratory-confirmed deaths reported by the WHO is displayed. Subsequent modelling studies have estimated the actual number to be in the range of 123,000 to 203,000.")
  #   }
  # })
  # 
  # # add note for cfr
  # # output$epi_notes_3 <- renderText({
  # #   if(input$comparison_metric=="cfr") { 
  # #     paste0("For COVID-19, this displays the proportion of confirmed cases who have subsequently died. When factoring in mild or asymptomatic infections that are not picked up by case surveillance efforts, current estimates place the case fatality rate in the range of 0.3-1%.")
  # #   }
  # # })
  # 
  # # update region selections
  # observeEvent(input$level_select, {
  #   if (input$level_select=="Global") {
  #     updatePickerInput(session = session, inputId = "region_select", 
  #                       choices = "Global", selected = "Global")
  #   }
  #   
  #   if (input$level_select=="Continent") {
  #     updatePickerInput(session = session, inputId = "region_select", 
  #                       choices = c("Africa", "Asia", "Europe", "North America", "South America"), 
  #                       selected = c("Africa", "Asia", "Europe", "North America", "South America"))
  #   }
  #   
  #   if (input$level_select=="US state") {
  #     updatePickerInput(session = session, inputId = "region_select", 
  #                       choices = as.character(cv_states_today[order(-cv_states_today$cases),]$state), 
  #                       selected = as.character(cv_states_today[order(-cv_states_today$cases),]$state)[1:10])
  #   }
  #   
  #   if (input$level_select=="Country") {
  #     updatePickerInput(session = session, inputId = "region_select", 
  #                       choices = as.character(cv_today_reduced[order(-cv_today_reduced$cases),]$country), 
  #                       selected = as.character(cv_states_today[order(-cv_states_today$cases),]$state)[1:10])
  #   }
  # }, ignoreInit = TRUE)
  # 
  # # create dataframe with selected countries
  # country_reactive_db = reactive({
  #   if (input$level_select=="Global") { 
  #     db = cv_cases_global
  #     db$region = db$global_level
  #   }
  #   if (input$level_select=="Continent") { 
  #     db = cv_cases_continent 
  #     db$region = db$continent
  #   }
  #   if (input$level_select=="Country") { 
  #     db = cv_cases
  #     db$region = db$country
  #   }
  #   if (input$level_select=="US state") { 
  #     db = cv_states
  #     db$region = db$state
  #   }
  #   
  #   if (input$outcome_select=="Cases (total)") { 
  #     db$outcome = db$cases
  #     db$new_outcome = db$new_cases
  #   }
  #   
  #   if (input$outcome_select=="Deaths (total)") { 
  #     db$outcome = db$deaths 
  #     db$new_outcome = db$new_deaths 
  #   }
  #   
  #   if (input$outcome_select=="Cases per million") { 
  #     db$outcome = db$cases_per_million 
  #     db$new_outcome = db$new_cases_per_million 
  #   }
  #   
  #   if (input$outcome_select=="Deaths per million") { 
  #     db$outcome = db$deaths_per_million 
  #     db$new_outcome = db$new_deaths_per_million 
  #   }
  #   
  #   db %>% filter(region %in% input$region_select)
  # })
  # 
  # # country-specific plots
  # output$country_plot <- renderPlotly({
  #   country_cases_plot(country_reactive_db(), start_point=input$start_date, input$minimum_date)
  # })
  # 
  # # country-specific plots
  # output$country_plot_cumulative <- renderPlotly({
  #   country_cases_cumulative(country_reactive_db(), start_point=input$start_date, input$minimum_date)
  # })
  # 
  # # country-specific plots
  # output$country_plot_cumulative_log <- renderPlotly({
  #   country_cases_cumulative_log(country_reactive_db(), start_point=input$start_date, input$minimum_date)
  # })
  # 
  # # output to download data
  # output$downloadCsv <- downloadHandler(
  #   filename = function() {
  #     paste("COVID_data_", cv_today$date[1], ".csv", sep="")
  #   },
  #   content = function(file) {
  #     cv_cases_sub = cv_cases %>% select(c(country, date, cases, new_cases, deaths, new_deaths,
  #                                          cases_per_million, new_cases_per_million, deaths_per_million, new_deaths_per_million))
  #     names(cv_cases_sub) = c("country", "date", "cumulative_cases", "new_cases_past_week", "cumulative_deaths", "new_deaths_past_week",
  #                             "cumulative_cases_per_million", "new_cases_per_million_past_week", "cumulative_deaths_per_million", "new_deaths_per_million_past_week")
  #     write.csv(cv_cases_sub, file)
  #   }
  # )
  # 
  # output$rawtable <- renderPrint({
  #   cv_cases_sub = cv_cases %>% select(c(country, date, cases, new_cases, deaths, new_deaths,
  #                                        cases_per_million, new_cases_per_million, deaths_per_million, new_deaths_per_million))
  #   names(cv_cases_sub) = c("country", "date", "cumulative_cases", "new_cases_past_week", "cumulative_deaths", "new_deaths_past_week",
  #                           "cumulative_cases_per_million", "new_cases_per_million_past_week", "cumulative_deaths_per_million", "new_deaths_per_million_past_week")
  #   orig <- options(width = 1000)
  #   print(tail(cv_cases_sub, input$maxrows), row.names = FALSE)
  #   options(orig)
  # })
  
}

#runApp(shinyApp(ui, server), launch.browser = TRUE)
shinyApp(ui, server)
#library(rsconnect)
#deployApp(account="vac-lshtm")
